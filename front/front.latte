{foreach $ajax as $request}
function ajax_{$request['title']}(state, value) {
{if $request['method'] === 'delete'}	var id = value.id
{/if}	return $.ajax({ method: '{$request['method']}', url: `${l}apiUrl{r}{$request['url']|replace,'{','${'}`{if $request['data']}, data: {$request['data']|noescape}{/if}, headers: {
		Authorization: state.authToken || ''
	}})
}
{/foreach}

const state = {
	updateHack: false,
	preloader: 0,
	l: null,
	lang: { en: {} }
}

{foreach $languages as $language}
DotObject.str('lang.{$language['language']}.{$language['code']|replaceRE,'/^\.l\./', ''}', "{$language['phrase']}", state);
{/foreach}
{foreach $structure['data'] as $data}
DotObject.str('{$data['path']}', {$data['value']}, state);
{/foreach}

state.l = state.lang.en
state.focus = null

const store = new Vuex.Store({
	state,
	mutations: {
		'initFromGet': function(state, payload) {
			var queryDict = {};
			var setFromUrl = function(item) {
				[key, value] = item.split("=")
				DotObject.str(key, value, state);
			}
			document.cookie.split("; ").forEach(setFromUrl)
			location.search.substr(1).split("&").forEach(setFromUrl)
		},
		'function': function(state, payload) {
		},
		'input': function(state, payload) {
			eval(payload.path + " = \'" + payload.value + "\'");
			state.updateHack = !state.updateHack
		},
		'preloaderAdd': function(state) {
			state.preloader ++
		},
		'preloaderSub': function(state) {
			state.preloader --
		},
{foreach $structure['actions'] as $action}
		'{$action['title']}': function(state, { value, res }) {
			if (res === 0) {
				res = Math.floor(Math.random() * 1000)
			}
{foreach $action['changes'] as $change}
			{if $change['value'] === 'delete'}var {$change['path']|replaceRE,'/\[.*/', ''} = Object.assign({}, state.{$change['path']|replaceRE,'/\[.*/', ''})
			delete {$change['path']}
			state.{$change['path']|replaceRE,'/\[.*/', ''} = {$change['path']|replaceRE,'/\[.*/', ''}{elseif $change['value'] === 'dummy'}state.{$change['path']}{elseif $change['path'] === 'focus'}$('[data-focus="{$change['value']|replace,'"', "'"}"]').focus(){else}state.{$change['path']} = {$change['value']|store|noescape}{/if}
{/foreach}
			state.updateHack = !state.updateHack
		},
{/foreach}
	},
	actions: {
		'initFromGet': function({l}commit, dispatch, state{r}, value) {
			var queryDict = {};
			var data = document.cookie.split("; ").concat(location.search.substr(1).split("&"))
			data.forEach(function(item) {
				[key, value] = item.split("=")
				queryDict[key] = value
				if (key === 'authToken') {
					dispatch('postLogin')
				}
			})
			commit('initFromGet', queryDict)
		},
{foreach $structure['actions'] as $action}
{if $action['ajax']}
		'{$action['title']}': function({l}commit, state{r}, value) {
			commit('preloaderAdd')
			ajax_{$action['ajax']}(state, value).done(res => {
				commit('{$action['title']}', { res, value })
				commit('preloaderSub')
			}).fail(err => {

			})
		},
{else}
{/if}
{/foreach}

	}
})

{foreach $components as $component}
Vue.component(`{$component['title']}`, {
	props: [ "item", "static", "index" ],
	methods: {
		moment: function(value) { 
			return window.moment(value) 
		}
	},
	computed: {
		state: function() {
			return this.$store.state.updateHack ? this.$store.state : this.$store.state
		}
	},
	template: `<{$component['tag']}{foreach $component['vueAttributes'] as $key => $value} {$key}="{$value|noescape}"{/foreach}{if $component['list']}>{if array_key_exists('prompt', $component)}<option value="null" v-text="{$component['prompt']}"></option>{/if}<{$component['nestedTag']} v-for="(item, id) of {$component['list']}" :key="item.id" {if $component['s-content']}v-text="{=implode(' + ', $component['s-content'])}" {/if}{if $component['s-value']}:value="{$component['s-value']}" {/if}{if $component['filter']}v-if="{$component['filter']|noescape}"{/if}{/if}{if $component['subcomponents']}>
{foreach $component['subcomponents'] as $subcomponent}
		<{$subcomponent}{if $component['list']} :index="id"{/if}{if $component['nest']} :item="{$component['nest']}"{/if}{if $component['static']} :static="{$component['static']}"{/if} />
{/foreach}{if $component['list']}</{$component['nestedTag']}>{/if}
	</{$component['tag']}>{elseif $component['list']}/></{$component['tag']}>{else}/>{/if}`
})

{/foreach}

const VueApp = new Vue({ el: "#app", store,
	mounted: function() {
		this.$store.dispatch('initFromGet')
	},

});